{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.1",
  "parameters": {
    "adminUserName": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Admin user name for the VMs"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password for the VMs (A mix of upper and lower-case characters, digits and symbols)"
      }
    },
    "storageAccountPrefix": {
      "type": "string",
      "metadata": {
        "description": "Unique namespace for the Storage Account where the VM disks will be placed (alphahumeric characters only)"
      }
    },
    "dnsNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Unique public DNS name where the VMs will be exposed"
      }
    },
    "workerStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "The type of the Storage Account to be created for worker nodes (defaults to Standard_LRS)"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "clouderavnet",
      "metadata": {
        "description": "The name of the virtual network provisioned for the deployment"
      }
    },
    "vnetNewOrExisting" : {
      "type" : "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Indicator for new or exiting Virtual Network"
      }
    },
    "virtualNetworkRGName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group Name for Vnet. For new VNet leave it empty, otherwise type in existing resource group name"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "clouderasubnet",
      "metadata": {
        "description": "Subnet name for the virtual network where resources will be provisioned"
      }
    },
    "addressPrefix": {
      "type": "string",
      "defaultValue": "10.40.2.0/24",
      "metadata": {
        "description": "Virtual Network address CIDR"
      }
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.40.2.0/25",
      "metadata": {
        "description": "CIDR for the subnet where VMs will be placed"
      }
    },
	
	"dataNodeIPAddress": {
      "type": "string",
      "defaultValue": "10.40.2.5",
      "metadata": {
        "description": "IP address for the first data node"
      } 
    },
    "tshirtSize": {
      "type": "string",
      "defaultValue": "Eval",
      "allowedValues": [
        "Eval",
        "Prod"
      ],
      "metadata": {
        "description": "T-shirt size of the Cloudera cluster (Eval, Prod)"
      }
    },
    "numberOfDataNodes": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of data nodes for Prod (defaults to 3)"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_DS14_v2",
      "metadata": {
        "description": "The size of the VMs deployed in the cluster (defaults to Standard_DS14_v2)"
      }
    }
  },
  "variables": {
    "templateAPIVersion":"2015-11-01",
    "resourceAPIVersion":"2015-06-15",
    "installCDH":"True",
    "addressPrefix":"[parameters('addressPrefix')]",
    "subnetPrefix":"[parameters('subnetPrefix')]",
    "scriptsUri": "https://raw.githubusercontent.com/mikchaos/cloudera-on-azure-germany/master/expand-cluster",
    "share-resourcesUri": "[concat(variables('scriptsUri'), '/shared-resources-', parameters('vnetNewOrExisting'), '-vnet.json')]",
    "data-nodeUri":"[concat(variables('scriptsUri'), '/data-node-', toLower(subString(parameters('vmSize'), 9, 4)), '_expand.json')]",
    "sa": "[parameters('dataNodeIPAddress')]",
    "ipOctet01": "[concat(split(variables('sa'), '.')[0], '.', split(variables('sa'), '.')[1], '.')]",
    "ipOctet2": "[int(split(variables('sa'), '.')[2])]",
    "ipOctet3": "[int(split(variables('sa'), '.')[3])]",
    "datanodeIpOctet3":"[variables('ipOctet3')]",
    "masterStorageAccount": {
      "prefix": "[parameters('storageAccountPrefix')]",
      "type": "[parameters('masterStorageAccountType')]"
    },
    "workerStorageAccount": {
      "prefix": "[parameters('storageAccountPrefix')]",
      "type": "[parameters('workerStorageAccountType')]"
    },
    "clusterTshirtSizeEval": {
      "masterNodeCount": 1,
      "dataNodeCount": "[parameters('numberOfDataNodes')]",
      "highAvailability": "false"
    },
    "clusterTshirtSizeProd": {
      "masterNodeCount": 3,
      "dataNodeCount": "[parameters('numberOfDataNodes')]",
      "highAvailability": "true"
    },
    "clusterSpec": "[variables(concat('clusterTshirtSize', parameters('tshirtSize')))]",
    "vmSpec": {
      "vmSize": "[parameters('vmSize')]",
      "adminUserName": "[parameters('adminUserName')]",
      "adminPassword": "[parameters('adminPassword')]",
      "masterNodeASName": "[concat(parameters('dnsNamePrefix'), '-mnAS')]",
      "dataNodeASName": "[concat(parameters('dnsNamePrefix'), '-dnAS')]"
    },
    "networkSpec": {
      "addressPrefix": "[variables('addressPrefix')]",
      "subnetPrefix": "[variables('subnetPrefix')]",
      "ipOctet01": "[variables('ipOctet01')]",
      "ipOctet2": "[variables('ipOctet2')]",
      "ipOctet3": "[variables('ipOctet3')]",
      "datanodeIpOctet3":"[variables('datanodeIpOctet3')]",
      "masterIP":"[variables('sa')]",
      "workerIP":"[concat(variables('ipOctet01'), add(variables('ipOctet2'), div(variables('datanodeIpOctet3'), 255)), '.', mod(variables('datanodeIpOctet3'), 255))]",
      "virtualNetworkName": "[parameters('virtualNetworkName')]",
      "virtualNetworkRGName":"[parameters('virtualNetworkRGName')]",
      "vnetNewOrExisting": "[parameters('vnetNewOrExisting')]",
      "virtualNetworkSubnetName": "[parameters('subnetName')]"
    },
    "newVNetId":"[resourceId(concat('Microsoft.Network','/','virtualNetworks'),parameters('virtualNetworkName'))]",
    "existingVNetId":"[resourceId(parameters('virtualNetworkRGName'),concat('Microsoft.Network','/','virtualNetworks'),parameters('virtualNetworkName'))]",
    "VNetId": "[variables(concat(parameters('vnetNewOrExisting'),'VNetId'))]"
  },
  "resources": [

    {
      "name": "data-node",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('templateAPIVersion')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('data-nodeUri')]",
          "contentVersion": "1.0.0.1"
        },
        "parameters": {
          "vnetID":{
            "value":"[variables('VNetId')]"
          },
          "resourceAPIVersion":{
            "value":"[variables('resourceAPIVersion')]"
          },
          "dnsNamePrefix": {
            "value": "[parameters('dnsNamePrefix')]"
          },
          "scriptsUri": {
            "value": "[variables('scriptsUri')]"
          },
          "storageAccount": {
            "value": "[variables('workerStorageAccount')]"
          },
          "vmCount": {
            "value": "[variables('clusterSpec').dataNodeCount]"
          },
          "vmSpec": {
            "value": "[variables('vmSpec')]"
          },
          "networkSpec": {
            "value": "[variables('networkSpec')]"
          },
          "clusterSpec": {
            "value": "[variables('clusterSpec')]"
          }
        }
      }
    }
  ]
}